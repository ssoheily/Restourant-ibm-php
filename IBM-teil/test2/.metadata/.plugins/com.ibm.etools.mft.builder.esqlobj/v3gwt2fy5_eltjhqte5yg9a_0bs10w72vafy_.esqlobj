/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage(); 
		
		SET OutputRoot.HTTPResponseHeader  = InputRoot.HTTPInputHeader;
		-- DELETE FIELD OutputRoot.HTTPInputHeader WITH HTTPHEADER-NODE
		
		DECLARE var REFERENCE TO Environment.Variables;
        DECLARE product_id CHAR;
        DECLARE table_id CHAR;       
        DECLARE namebediener CHAR;
        DECLARE PRICE CHAR '2' ;
        DECLARE COMPARE CHAR ;
        DECLARE I INTEGER ;
        DECLARE zeit1 INTEGER ; 
        DECLARE zeit2 INTEGER ; 
        SET product_id = InputRoot.JSON.Data.product_id;
        SET table_id = InputRoot.JSON.Data.table_id;
        SET namebediener = InputRoot.JSON.Data.namebediener;
        SET zeit1 = InputRoot.JSON.Data.timestamp ;
       
        
        SET var.query[] = (SELECT * FROM Database.RESTCHAR1 AS T WHERE T.TABLE_ID =table_id AND  T.ZEIT > zeit1  );
        SET COMPARE = EXISTS( var.query[]);
         
        SET OutputRoot.HTTPReplyHeader."Content-Type" = 'text/json';
        -- SET OutputRoot.LocalEnvironment.WrittenDestination.HTTP.RequestURL=	'http://127.0.0.1/dashboard/cleint/ibm.php';
        SET Environment.Destination.HTTP.RequestURL = 'http://127.0.0.1/dashboard/cleint/ibm.php';
         
         IF COMPARE= TRUE THEN 	
			SET OutputRoot.JSON.Data = InputRoot.JSON.Data.table_id;
			SET table_id= OutputRoot.JSON.Data;
			DECLARE crlf CHAR CAST(X'0D0A' AS CHAR CCSID 1208);
			DECLARE errormsg CHAR 'the table is occupied, please order the new table :' || crlf;
         ELSE
         	SET zeit2 = zeit1 + 300; 
         	DELETE FROM Database.RESTCHAR1 AS T WHERE T.TABLE_ID =table_id; 
         	INSERT INTO Database.RESTCHAR1 (PRODUCT_ID,PRISE,NAME_RESTURANT,TABLE_ID,ZEIT)
         	 VALUES(product_id,PRICE ,namebediener,table_id,zeit2);
         	 SET OutputRoot.JSON.Data.amount = PRICE;
         	
         END IF;	
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
