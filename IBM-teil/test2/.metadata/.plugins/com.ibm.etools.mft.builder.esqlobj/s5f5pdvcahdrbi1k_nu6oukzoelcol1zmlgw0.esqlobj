/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage(); 
		 
		
		DECLARE var REFERENCE TO Environment.Variables;
		
        DECLARE product_id CHAR;
        DECLARE table_id CHAR;       
        DECLARE namebediener CHAR;
        DECLARE PRICE CHAR;
        DECLARE COMPARE CHAR ;
        DECLARE kunde_name CHAR ;
        DECLARE status CHAR '' ;
        
        DECLARE zeit1 INTEGER ; -- timestamp zeit von php 
        DECLARE zeitdatabase TIMESTAMP ;-- database zeit
        DECLARE zeitphp TIMESTAMP ;
        
		            
        DECLARE beschreibung CHAR; 
        DECLARE leer_table CHAR;
        DECLARE concat_string1 CHAR;
        DECLARE concat_string2 CHAR ''; 
        DECLARE product_id_response  CHAR;
        DECLARE Feedback  CHAR;
        DECLARE comparetime  INTEGER;
         
        SET product_id = InputRoot.JSON.Data.product_id; 
        SET product_id  = SUBSTRING(product_id  AFTER '#');
        SET OutputRoot.JSON.Data.product_id =product_id;
        SET table_id = InputRoot.JSON.Data.table_id;
        SET namebediener = InputRoot.JSON.	Data.namebediener;
        SET kunde_name = InputRoot.JSON.Data.kunde_name;
        SET OutputRoot.JSON.Data.Feedback= InputRoot.JSON.Data.Feedback ;
        
       
	    
       	SET OutputRoot.JSON.Data.Feedback VALUE  = NULL;
        SET Feedback = 'Thanke you for feedback ' ;
        --  write header response 
        SET OutputRoot.HTTPReplyHeader."Content-Type" = 'text/json';
        
    
        -- create prise
        
       	SET var.product[] = (SELECT T.PRODUCT_PRICE FROM Database.Products AS T WHERE T.ID = product_id);
       	SET PRICE = var.product[1];
       
        -- condition: the table is occupied (Y/N)?
         
        SET var.query[] = (SELECT * FROM Database.RESTTABLE11 AS T WHERE T.TABLE_ID = table_id );
        SET COMPARE = EXISTS( var.query[]);
        
        IF COMPARE= TRUE THEN 
        	
         -- Compare database mit IBM      
        	SET var.time[] = PASSTHRU ('SELECT MAX(ZEIT) FROM RESTTABLE11 WHERE TABLE_ID = '|| table_id );
			SET zeitdatabase = var.time.[1];
			
			DECLARE MyTimeStamp TIMESTAMP;
			SET MyTimeStamp =  zeitdatabase.TIMESTAMP ; -- TIMESTAMP '1970-01-01 00:00:00'; //convert to nummeric TIMESTAMP
			DECLARE eventTimeStamp INTERVAL;
			
			SET eventTimeStamp = (CURRENT_TIMESTAMP - MyTimeStamp) SECOND * 1;
			SET comparetime = CAST(eventTimeStamp AS INTEGER);

			IF (comparetime < 300) THEN
	 
				SET beschreibung='the table is occupied, please order the new table,you can see free the number table:  ';
				SET OutputRoot.JSON.Data.beschreibung = beschreibung;
				-- write blank table 
				SET var.table[] = PASSTHRU('SELECT DISTINCT TABLE_ID FROM RESTTABLE11 ORDER BY TABLE_ID ASC');
				
				DECLARE count_array INT CARDINALITY(var.table[]);
				DECLARE I INT 1;
				
				WHILE I <= count_array DO
					-- SET X = var.table[I].table_id;
					IF var.table[I].TABLE_ID <> table_id THEN
						SET concat_string1 = var.table[I].TABLE_ID;
						 SET concat_string2 = concat_string2 || ' , ' || concat_string1;
					END IF;
					SET I = I + 1;
				END WHILE;			
				--// 
				SET leer_table = concat_string2;
				SET OutputRoot.JSON.Data.leer_table = leer_table;
				SET OutputRoot.JSON.Data.kunde_name = kunde_name;
				-- do other option equal null
				-- SET OutputRoot.JSON.Data.amount = PRICE; 		
				SET OutputRoot.JSON.Data.status = 'busy';
				SET OutputRoot.JSON.Data.amount VALUE  = NULL;
				SET OutputRoot.JSON.Data.amount VALUE  = NULL;
				SET OutputRoot.JSON.Data.product_id VALUE  = NULL;
				SET OutputRoot.JSON.Data.namebediener VALUE  = NULL;
	         	SET OutputRoot.JSON.Data.timestamp =  InputRoot.JSON.Data.timestamp;
	         	SET OutputRoot.JSON.Data.timestamp = NULL;
			ELSE
				-- 300 is time reserve     	 	        	
				INSERT INTO Database.RESTTABLE11(PRODUCT_ID,PRISE,NAME_RESTURANT,TABLE_ID)
				VALUES(product_id ,PRICE ,namebediener,table_id); 
         	        	 
				SET OutputRoot.JSON.Data.amount = PRICE;
				SET OutputRoot.JSON.Data.status = 'free';
				SET OutputRoot.JSON.Data.kunde_name = kunde_name;
				SET beschreibung='Confirmation of your order. ';
				SET OutputRoot.JSON.Data.beschreibung = beschreibung;
				SET leer_table='Your table is reserved ';
				SET OutputRoot.JSON.Data.leer_table = leer_table;	
			END IF;
         	ELSE
				-- 300 is time reserve     	 	        	
				INSERT INTO Database.RESTTABLE11(PRODUCT_ID,PRISE,NAME_RESTURANT,TABLE_ID)
				VALUES(product_id ,PRICE ,namebediener,table_id); 
         	        	 
				SET OutputRoot.JSON.Data.amount = PRICE;
				SET OutputRoot.JSON.Data.status = 'free';
				SET OutputRoot.JSON.Data.kunde_name = kunde_name;
				SET beschreibung='Confirmation of your order. ';
				SET OutputRoot.JSON.Data.beschreibung = beschreibung;
				SET leer_table='Your table is reserved ';
				SET OutputRoot.JSON.Data.leer_table = leer_table;
         	
         END IF;	
        
         
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
