/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage(); 
		
		SET OutputRoot.HTTPResponseHeader  = InputRoot.HTTPInputHeader;
		-- DELETE FIELD OutputRoot.HTTPInputHeader WITH HTTPHEADER-NODE
		
		DECLARE var REFERENCE TO Environment.Variables;
		
        DECLARE product_id CHAR;
        DECLARE table_id CHAR;       
        DECLARE namebediener CHAR;
        DECLARE PRICE CHAR '2' ;
        DECLARE COMPARE CHAR ;
        DECLARE  kunde_name CHAR ;
        DECLARE I INTEGER ;
          DECLARE X CHAR  ;
        DECLARE zeit1 INTEGER ; -- timestamp zeit von php 
        DECLARE zeit2 INTEGER ;-- database zeit
        DECLARE beschreibung CHAR; 
        DECLARE leer_table CHAR;
        DECLARE concat_string1 CHAR;
        DECLARE concat_string2 CHAR ''; 
        DECLARE product_id_response  CHAR;
        DECLARE Feedback  CHAR;
        SET product_id = InputRoot.JSON.Data.product_id; 
        SET product_id  = SUBSTRING(product_id  AFTER '#');
        SET OutputRoot.JSON.Data.product_id =product_id;
        SET table_id = InputRoot.JSON.Data.table_id;
        SET namebediener = InputRoot.JSON.	Data.namebediener;
        SET kunde_name = InputRoot.JSON.Data.kunde_name;
        SET zeit1 = InputRoot.JSON.Data.timestamp ;
        SET OutputRoot.JSON.Data.Feedback= InputRoot.JSON.Data.Feedback ;
   		
       	SET OutputRoot.JSON.Data.Feedback VALUE  = NULL;
        SET Feedback = 'Thanke you for feedback ' ;
        --  write header response 
        SET OutputRoot.HTTPReplyHeader."Content-Type" = 'text/json';
        SET Environment.Destination.HTTP.RequestURL = 'http://127.0.0.1/dashboard/cleint/ibm.php';
        -- create prise
        
        -- condition: the table is occupied (Y/N)?
        SET var.query[] = (SELECT * FROM Database.RESTCHAR1 AS T WHERE T.TABLE_ID =table_id AND  T.ZEIT > zeit1  );
        SET COMPARE = EXISTS( var.query[]);
        
         IF COMPARE= TRUE THEN 		
			SET beschreibung='the table is occupied, please order the new table,you can see free the number table:  ';
			SET OutputRoot.JSON.Data.beschreibung = beschreibung;
			-- show blank table on the webpage 
			-- SELECT TABLE_ID FROM DATABASE.RESTCHAR1 WHERE TABLE_ID IS NOT TABLE_ID GROUP BY TABLE_ID 
			-- SET var.query.table[] = PASSTHRU('SELECT DISTINCT TABLE_ID FROM DATABASE.RESTCHAR1 WHERE TABLE_ID IS NOT'|| table_id);
			
			SET var.table[] = (SELECT * FROM Database.RESTCHAR1 AS T);
			
			DECLARE count_array INT CARDINALITY(var.table[]);
			DECLARE I INT 1;
			
			WHILE I <= count_array DO
				SET X = var.table[1].table_id;
				IF var.table[].table_id <> table_id THEN
					SET concat_string1 = var.table[I].TABLE_ID;
					SET concat_string2 = concat_string2 || ',' || concat_string1;
				END IF;
				SET I = I + 1;
			END WHILE;			
			--//
			SET leer_table = concat_string2;
			SET OutputRoot.JSON.Data.leer_table = leer_table;
			SET OutputRoot.JSON.Data.amount = PRICE;
			SET OutputRoot.JSON.Data.kunde_name = kunde_name;
         	SET OutputRoot.JSON.Data.timestamp =  InputRoot.JSON.Data.timestamp;
         	SET OutputRoot.JSON.Data.timestamp = NULL;
         ELSE
         	-- 300 is time reserve
         	SET zeit2 = zeit1 + 300;
         	
         	-- delete row, where equal table_id has  
         	    	
         	-- DELETE FROM Database.RESTCHAR1 AS T WHERE T.TABLE_ID =table_id;          	        	
         	INSERT INTO Database.RESTCHAR1 (PRODUCT_ID,PRISE,NAME_RESTURANT,TABLE_ID,ZEIT)
         	 VALUES(product_id ,PRICE ,namebediener,table_id,zeit2);        	 
         	 SET OutputRoot.JSON.Data.amount = PRICE;
         	 SET OutputRoot.JSON.Data.kunde_name = kunde_name;
         	 SET beschreibung='Confirmation of your ordere. ';
         	 SET OutputRoot.JSON.Data.beschreibung = beschreibung;
         	 SET leer_table='Your table is reserved ';
         	 SET OutputRoot.JSON.Data.leer_table = leer_table;
         	 SET OutputRoot.JSON.Data.timestamp =  InputRoot.JSON.Data.timestamp;
         	 SET OutputRoot.JSON.Data.timestamp = NULL;
         END IF;	
        
         
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
